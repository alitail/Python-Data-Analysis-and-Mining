#Numpy基本操作
# -*- coding: utf-8 -*
import numpy as np
a = np.array([2,0,1,5])
print(a)
print(a[:3])
print(a.min())
a.sort()
b = np.array([[1,2,3],[4,5,6]]) #创建二维数组
print(b*b) #输出数组的平方阵



#SciPy基本操作
# -*- coding: utf-8 -*
# 求解非线性方程2x1-x2^2=1,x1^2-x2=2
from scipy.optimize import fsolve
def f(x):
    x1 = x[0]
    x2 = x[1]
    return [2*x1 - x2**2 -1, x1**2 -x2 -2]
	
result = fsolve(f, [1,1])	#输入初始值[1,1]并求解
print(result)
# 数值积分
from scipy import integrate	#导入积分函数
def g(x):	#定义被积分的函数
	return (1 - x**2)**0.5

pi_2, err = integrate.quad(g, -1, 1) #积分结果和误差
print(pi_2 * 2)	



#Matplotlib基本操作
# -*- coding: utf-8 -*-
import numpy as np
import matplotlib.pyplot as plt
x = np.linspace(0,10,1000)
y = np.sin(x) + 1
z = np.cos(x**2) + 1
plt.figure(figsize = (8,4))
plt.plot(x,y,label = '$\sinx + 1$', color='red', linewidth = 2)	#\sinx区别sinx 前者正体后者斜体
plt.plot(x,z, 'b--', label = '$\cos x^2 +1$') #'b--' blue dashed line
plt.xlabel('Time(s) ')
plt.ylabel('伏特')
plt.title('A Simple Example')
plt.ylim(0, 2.2)
plt.legend()
plt.rcParams['font.sans-serif'] = ['SimHei']
plt.show()
'''
plt.rcParams['font.sans-serif'] = ['SimHei']	#正常使用中文标签
plt.rcParams['axes.unicode_minus'] = False		#解决保存图像是负号'-'显示为方格的问题
'''



#Pandas基本操作 (Python下最强大数据分析和探索工具，没有之一)
import pandas as pd
s = pd.Series([1,2,3],index=['a','b','c'])
d = pd.DataFrame([[1,2,3],[4,5,6]],columns=['a','b','c'])
d2 = pd.DataFrame(s)

d.head()
d.describe()

'''
pd.read_excel('data.xls')
pd.read_csv('data.csv', encoding = 'utf-8')
'''



#StatsModels基本操作
# -*- coding: utf-8 -*-
from statsmodels.tsa.stattools import adfuller as ADF
import numpy as np
ADF(np.random.rand(100))



#Scikit-learn
# -*- coding: utf-8 -*-
from sklearn.linear_model import LinearRegression
model = LinearRegression()
print(model)

from sklearn import datasets
iris = datasets.load_iris()
print(iris.data.shape)

from sklearn import svm	#导入SVM模型
clf = svm.LinearSVC()	#建立线性SVM分类器
clf.fit(iris.data, iris.target)	#用数据训练模型
clf.predict([[5.0, 3.6, 1.3, 0.25]])	#训练好模型之后，输入数据进行预测
clf.coef_	#查看训练好模型的参数



#Keras神经网络模型
# -*- coding: utf-8 -*-
from keras.models import Sequential
from keras.layers.core import Dense, Dropout, Activation
from keras.optimizers import SGD

model = Sequential()
model.add(Dense(20,64))
model.add(Activation('tanch'))
model.add(Dropout)
model.add(Dense(64, 64))
model.add(Activation('tanh'))
model.add(Dropout(0.5))
model.add(Dense(64, 1))
model.add(Actication('sigmoid'))

sgd = SGD(lr=0.1, decay=1e-6, momentum=0.9, nesterov=True) #定义求解函数
model.compile(loss='mean_squared_error', optimizer=sgd)	#编译生成模型，损失函数为平均误差平方和
model.fit(X_train, y_train, nb_epoch=20, batch_size=16)	#训练模型
score = model.evaluate(X_test, y_test, batch_size=16)	#测试模型
###实战练习



#Gensim
# -*- coding: utf-8 -*-
import gensim, logging
logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)
sentences = [['first','sentence'],['second','sentence']]
model = gensim.models.Word2Vec(sentences, min_count=1)
print(model['sentence'])
###实战练习



























